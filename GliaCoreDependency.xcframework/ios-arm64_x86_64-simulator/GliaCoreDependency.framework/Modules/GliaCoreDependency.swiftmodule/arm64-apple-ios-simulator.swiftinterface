// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GliaCoreDependency
import CommonCrypto
import CoreFoundation
import Dispatch
import Foundation
@_exported import GliaCoreDependency
import Security
import Swift
import _Concurrency
import zlib
extension GliaCoreDependency.SocketIO {
  public struct SocketIOClientConfiguration : Swift.ExpressibleByArrayLiteral, Swift.Collection, Swift.MutableCollection {
    public typealias Element = GliaCoreDependency.SocketIO.SocketIOClientOption
    public typealias Index = Swift.Array<GliaCoreDependency.SocketIO.SocketIOClientOption>.Index
    public typealias Iterator = Swift.Array<GliaCoreDependency.SocketIO.SocketIOClientOption>.Iterator
    public typealias SubSequence = Swift.Array<GliaCoreDependency.SocketIO.SocketIOClientOption>.SubSequence
    public var startIndex: GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Index {
      get
    }
    public var endIndex: GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Index {
      get
    }
    public var isEmpty: Swift.Bool {
      get
    }
    public var count: GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Index.Stride {
      get
    }
    public var first: GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Element? {
      get
    }
    public subscript(position: GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Index) -> GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Element {
      get
      set
    }
    public subscript(bounds: Swift.Range<GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Index>) -> GliaCoreDependency.SocketIO.SocketIOClientConfiguration.SubSequence {
      get
      set
    }
    public init(arrayLiteral elements: GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Element...)
    public func makeIterator() -> GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Iterator
    public func index(after i: GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Index) -> GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Index
    public mutating func insert(_ element: GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Element, replacing replace: Swift.Bool = true)
    public typealias ArrayLiteralElement = GliaCoreDependency.SocketIO.SocketIOClientConfiguration.Element
    public typealias Indices = Swift.DefaultIndices<GliaCoreDependency.SocketIO.SocketIOClientConfiguration>
  }
}
extension GliaCoreDependency.SocketIO {
  @objc @_hasMissingDesignatedInitializers final public class SocketAnyEvent : ObjectiveC.NSObject {
    final public let event: Swift.String
    final public let items: [Any]?
    @objc override final public var description: Swift.String {
      @objc get
    }
    @objc deinit
  }
}
extension GliaCoreDependency.SocketIO {
  public static let WebsocketDidConnectNotification: Swift.String
  public static let WebsocketDidDisconnectNotification: Swift.String
  public static let WebsocketDisconnectionErrorKeyName: Swift.String
}
public protocol SocketIOWebSocketDelegate : AnyObject {
  func websocketDidConnect(socket: GliaCoreDependency.SocketIO.WebSocket)
  func websocketDidDisconnect(socket: GliaCoreDependency.SocketIO.WebSocket, error: Foundation.NSError?)
  func websocketDidReceiveMessage(socket: GliaCoreDependency.SocketIO.WebSocket, text: Swift.String)
  func websocketDidReceiveData(socket: GliaCoreDependency.SocketIO.WebSocket, data: Foundation.Data)
}
public protocol SocketIOWebSocketPongDelegate : AnyObject {
  func websocketDidReceivePong(socket: GliaCoreDependency.SocketIO.WebSocket, data: Foundation.Data?)
}
extension GliaCoreDependency.SocketIO {
  @objc open class WebSocket : ObjectiveC.NSObject, Foundation.StreamDelegate {
    public enum CloseCode : Swift.UInt16 {
      case normal
      case goingAway
      case protocolError
      case protocolUnhandledType
      case noStatusReceived
      case encoding
      case policyViolated
      case messageTooBig
      public init?(rawValue: Swift.UInt16)
      public typealias RawValue = Swift.UInt16
      public var rawValue: Swift.UInt16 {
        get
      }
    }
    public static let ErrorDomain: Swift.String
    public var callbackQueue: Dispatch.DispatchQueue
    weak public var delegate: GliaCoreDependency.SocketIOWebSocketDelegate?
    weak public var pongDelegate: GliaCoreDependency.SocketIOWebSocketPongDelegate?
    public var onConnect: (() -> Swift.Void)?
    public var onDisconnect: ((Foundation.NSError?) -> Swift.Void)?
    public var onText: ((Swift.String) -> Swift.Void)?
    public var onData: ((Foundation.Data) -> Swift.Void)?
    public var onPong: ((Foundation.Data?) -> Swift.Void)?
    public var headers: [Swift.String : Swift.String]
    public var voipEnabled: Swift.Bool
    public var disableSSLCertValidation: Swift.Bool
    public var security: GliaCoreDependency.SocketIOSSLTrustValidator?
    public var enabledSSLCipherSuites: [Security.SSLCipherSuite]?
    public var origin: Swift.String?
    public var timeout: Swift.Int
    public var isConnected: Swift.Bool {
      get
    }
    public var currentURL: Foundation.URL {
      get
    }
    public init(url: Foundation.URL, protocols: [Swift.String]? = nil)
    convenience public init(url: Foundation.URL, writeQueueQOS: Foundation.QualityOfService, protocols: [Swift.String]? = nil)
    open func connect()
    open func disconnect(forceTimeout: Foundation.TimeInterval? = nil, closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
    open func write(string: Swift.String, completion: (() -> ())? = nil)
    open func write(data: Foundation.Data, completion: (() -> ())? = nil)
    open func write(ping: Foundation.Data, completion: (() -> ())? = nil)
    @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
    @objc deinit
  }
}
public protocol SocketIOSSLTrustValidator {
  func isValid(_ trust: Security.SecTrust, domain: Swift.String?) -> Swift.Bool
}
extension GliaCoreDependency.SocketIO {
  @objc open class SSLCert : ObjectiveC.NSObject {
    public init(data: Foundation.Data)
    public init(key: Security.SecKey)
    @objc deinit
  }
  open class SSLSecurity : GliaCoreDependency.SocketIOSSLTrustValidator {
    public var validatedDN: Swift.Bool
    convenience public init(usePublicKeys: Swift.Bool = false)
    public init(certs: [GliaCoreDependency.SocketIO.SSLCert], usePublicKeys: Swift.Bool)
    public func isValid(_ trust: Security.SecTrust, domain: Swift.String?) -> Swift.Bool
    @objc deinit
  }
}
@objc public protocol SocketEngineSpec {
  @objc weak var client: GliaCoreDependency.SocketEngineClient? { get set }
  @objc var closed: Swift.Bool { get }
  @objc var connected: Swift.Bool { get }
  @objc var connectParams: [Swift.String : Any]? { get set }
  @objc var doubleEncodeUTF8: Swift.Bool { get }
  @objc var cookies: [Foundation.HTTPCookie]? { get }
  @objc var engineQueue: Dispatch.DispatchQueue { get }
  @objc var extraHeaders: [Swift.String : Swift.String]? { get }
  @objc var fastUpgrade: Swift.Bool { get }
  @objc var forcePolling: Swift.Bool { get }
  @objc var forceWebsockets: Swift.Bool { get }
  @objc var polling: Swift.Bool { get }
  @objc var probing: Swift.Bool { get }
  @objc var sid: Swift.String { get }
  @objc var socketPath: Swift.String { get }
  @objc var urlPolling: Foundation.URL { get }
  @objc var urlWebSocket: Foundation.URL { get }
  @objc var websocket: Swift.Bool { get }
  @objc var ws: GliaCoreDependency.SocketIO.WebSocket? { get }
  @objc init(client: GliaCoreDependency.SocketEngineClient, url: Foundation.URL, options: Foundation.NSDictionary?)
  @objc func connect()
  @objc func didError(reason: Swift.String)
  @objc func disconnect(reason: Swift.String)
  @objc func doFastUpgrade()
  @objc func flushWaitingForPostToWebSocket()
  @objc func parseEngineData(_ data: Foundation.Data)
  @objc func parseEngineMessage(_ message: Swift.String, fromPolling: Swift.Bool)
  @objc func write(_ msg: Swift.String, withType type: GliaCoreDependency.SocketIO.SocketEnginePacketType, withData data: [Foundation.Data])
}
extension GliaCoreDependency.SwiftPhoenixClient {
  @_hasMissingDesignatedInitializers public class Channel {
    final public let topic: Swift.String
    public var params: GliaCoreDependency.SwiftPhoenixClient.Payload {
      get
      set
    }
    @objc deinit
    public var onMessage: (_ message: GliaCoreDependency.SwiftPhoenixClient.Message) -> GliaCoreDependency.SwiftPhoenixClient.Message
    @discardableResult
    public func join(timeout: Foundation.TimeInterval? = nil) -> GliaCoreDependency.SwiftPhoenixClient.Push
    @discardableResult
    public func onClose(_ callback: @escaping ((GliaCoreDependency.SwiftPhoenixClient.Message) -> Swift.Void)) -> Swift.Int
    @discardableResult
    public func delegateOnClose<Target>(to owner: Target, callback: @escaping ((Target, GliaCoreDependency.SwiftPhoenixClient.Message) -> Swift.Void)) -> Swift.Int where Target : AnyObject
    @discardableResult
    public func onError(_ callback: @escaping ((_ message: GliaCoreDependency.SwiftPhoenixClient.Message) -> Swift.Void)) -> Swift.Int
    @discardableResult
    public func delegateOnError<Target>(to owner: Target, callback: @escaping ((Target, GliaCoreDependency.SwiftPhoenixClient.Message) -> Swift.Void)) -> Swift.Int where Target : AnyObject
    @discardableResult
    public func on(_ event: Swift.String, callback: @escaping ((GliaCoreDependency.SwiftPhoenixClient.Message) -> Swift.Void)) -> Swift.Int
    @discardableResult
    public func delegateOn<Target>(_ event: Swift.String, to owner: Target, callback: @escaping ((Target, GliaCoreDependency.SwiftPhoenixClient.Message) -> Swift.Void)) -> Swift.Int where Target : AnyObject
    public func off(_ event: Swift.String, ref: Swift.Int? = nil)
    @discardableResult
    public func push(_ event: Swift.String, payload: GliaCoreDependency.SwiftPhoenixClient.Payload, timeout: Foundation.TimeInterval = Defaults.timeoutInterval) -> GliaCoreDependency.SwiftPhoenixClient.Push
    @discardableResult
    public func leave(timeout: Foundation.TimeInterval = Defaults.timeoutInterval) -> GliaCoreDependency.SwiftPhoenixClient.Push
    public func onMessage(callback: @escaping (GliaCoreDependency.SwiftPhoenixClient.Message) -> GliaCoreDependency.SwiftPhoenixClient.Message)
  }
}
extension GliaCoreDependency.SwiftPhoenixClient.Channel {
  public var isClosed: Swift.Bool {
    get
  }
  public var isErrored: Swift.Bool {
    get
  }
  public var isJoined: Swift.Bool {
    get
  }
  public var isJoining: Swift.Bool {
    get
  }
  public var isLeaving: Swift.Bool {
    get
  }
}
extension GliaCoreDependency.Starscream {
  public static let WebsocketDidConnectNotification: Swift.String
  public static let WebsocketDidDisconnectNotification: Swift.String
  public static let WebsocketDisconnectionErrorKeyName: Swift.String
  public enum CloseCode : Swift.UInt16 {
    case normal
    case goingAway
    case protocolError
    case protocolUnhandledType
    case noStatusReceived
    case encoding
    case policyViolated
    case messageTooBig
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum ErrorType : Swift.Error {
    case outputStreamWriteError
    case compressionError
    case invalidSSLError
    case writeTimeoutError
    case protocolError
    case upgradeError
    case closeError
    public static func == (a: GliaCoreDependency.Starscream.ErrorType, b: GliaCoreDependency.Starscream.ErrorType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct WSError : Swift.Error {
    public let type: GliaCoreDependency.Starscream.ErrorType
    public let message: Swift.String
    public let code: Swift.Int
  }
}
public protocol WebSocketClient : AnyObject {
  var delegate: GliaCoreDependency.WebSocketDelegate? { get set }
  var pongDelegate: GliaCoreDependency.WebSocketPongDelegate? { get set }
  var disableSSLCertValidation: Swift.Bool { get set }
  var overrideTrustHostname: Swift.Bool { get set }
  var desiredTrustHostname: Swift.String? { get set }
  var sslClientCertificate: GliaCoreDependency.Starscream.SSLClientCertificate? { get set }
  var security: GliaCoreDependency.StarscreamSSLTrustValidator? { get set }
  var enabledSSLCipherSuites: [Security.SSLCipherSuite]? { get set }
  var isConnected: Swift.Bool { get }
  func connect()
  func disconnect(forceTimeout: Foundation.TimeInterval?, closeCode: Swift.UInt16)
  func write(string: Swift.String, completion: (() -> ())?)
  func write(data: Foundation.Data, completion: (() -> ())?)
  func write(ping: Foundation.Data, completion: (() -> ())?)
  func write(pong: Foundation.Data, completion: (() -> ())?)
}
extension GliaCoreDependency.WebSocketClient {
  public func write(string: Swift.String)
  public func write(data: Foundation.Data)
  public func write(ping: Foundation.Data)
  public func write(pong: Foundation.Data)
  public func disconnect()
}
extension GliaCoreDependency.Starscream {
  public struct SSLSettings {
    public let useSSL: Swift.Bool
    public let disableCertValidation: Swift.Bool
    public var overrideTrustHostname: Swift.Bool
    public var desiredTrustHostname: Swift.String?
    public let sslClientCertificate: GliaCoreDependency.Starscream.SSLClientCertificate?
    public let cipherSuites: [Security.SSLCipherSuite]?
  }
}
public protocol WSStreamDelegate : AnyObject {
  func newBytesInStream()
  func streamDidError(error: Swift.Error?)
}
public protocol WSStream {
  var delegate: GliaCoreDependency.WSStreamDelegate? { get set }
  func connect(url: Foundation.URL, port: Swift.Int, timeout: Foundation.TimeInterval, ssl: GliaCoreDependency.Starscream.SSLSettings, completion: @escaping ((Swift.Error?) -> Swift.Void))
  func write(data: Foundation.Data) -> Swift.Int
  func read() -> Foundation.Data?
  func cleanup()
  func sslTrust() -> (trust: Security.SecTrust?, domain: Swift.String?)
}
extension GliaCoreDependency.Starscream {
  @objc @_inheritsConvenienceInitializers open class FoundationStream : ObjectiveC.NSObject, GliaCoreDependency.WSStream, Foundation.StreamDelegate {
    weak public var delegate: GliaCoreDependency.WSStreamDelegate?
    public var enableSOCKSProxy: Swift.Bool
    public func connect(url: Foundation.URL, port: Swift.Int, timeout: Foundation.TimeInterval, ssl: GliaCoreDependency.Starscream.SSLSettings, completion: @escaping ((Swift.Error?) -> Swift.Void))
    public func write(data: Foundation.Data) -> Swift.Int
    public func read() -> Foundation.Data?
    public func cleanup()
    public func sslTrust() -> (trust: Security.SecTrust?, domain: Swift.String?)
    @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
    @objc override dynamic public init()
    @objc deinit
  }
}
public protocol WebSocketDelegate : AnyObject {
  func websocketDidConnect(socket: GliaCoreDependency.WebSocketClient)
  func websocketDidDisconnect(socket: GliaCoreDependency.WebSocketClient, error: Swift.Error?)
  func websocketDidReceiveMessage(socket: GliaCoreDependency.WebSocketClient, text: Swift.String)
  func websocketDidReceiveData(socket: GliaCoreDependency.WebSocketClient, data: Foundation.Data)
}
public protocol WebSocketPongDelegate : AnyObject {
  func websocketDidReceivePong(socket: GliaCoreDependency.WebSocketClient, data: Foundation.Data?)
}
public protocol WebSocketAdvancedDelegate : AnyObject {
  func websocketDidConnect(socket: GliaCoreDependency.Starscream.WebSocket)
  func websocketDidDisconnect(socket: GliaCoreDependency.Starscream.WebSocket, error: Swift.Error?)
  func websocketDidReceiveMessage(socket: GliaCoreDependency.Starscream.WebSocket, text: Swift.String, response: GliaCoreDependency.Starscream.WebSocket.WSResponse)
  func websocketDidReceiveData(socket: GliaCoreDependency.Starscream.WebSocket, data: Foundation.Data, response: GliaCoreDependency.Starscream.WebSocket.WSResponse)
  func websocketHttpUpgrade(socket: GliaCoreDependency.Starscream.WebSocket, request: Swift.String)
  func websocketHttpUpgrade(socket: GliaCoreDependency.Starscream.WebSocket, response: Swift.String)
}
extension GliaCoreDependency.Starscream {
  @objc open class WebSocket : ObjectiveC.NSObject, Foundation.StreamDelegate, GliaCoreDependency.WebSocketClient, GliaCoreDependency.WSStreamDelegate {
    public enum OpCode : Swift.UInt8 {
      case continueFrame
      case textFrame
      case binaryFrame
      case connectionClose
      case ping
      case pong
      public init?(rawValue: Swift.UInt8)
      public typealias RawValue = Swift.UInt8
      public var rawValue: Swift.UInt8 {
        get
      }
    }
    public static let ErrorDomain: Swift.String
    public var callbackQueue: Dispatch.DispatchQueue
    @_hasMissingDesignatedInitializers public class WSResponse {
      public var code: GliaCoreDependency.Starscream.WebSocket.OpCode
      public var frameCount: Swift.Int
      public var buffer: Foundation.NSMutableData?
      final public let firstFrame: Foundation.Date
      @objc deinit
    }
    weak public var delegate: GliaCoreDependency.WebSocketDelegate?
    weak public var advancedDelegate: GliaCoreDependency.WebSocketAdvancedDelegate?
    weak public var pongDelegate: GliaCoreDependency.WebSocketPongDelegate?
    public var onConnect: (() -> Swift.Void)?
    public var onDisconnect: ((Swift.Error?) -> Swift.Void)?
    public var onText: ((Swift.String) -> Swift.Void)?
    public var onData: ((Foundation.Data) -> Swift.Void)?
    public var onPong: ((Foundation.Data?) -> Swift.Void)?
    public var onHttpResponseHeaders: (([Swift.String : Swift.String]) -> Swift.Void)?
    public var disableSSLCertValidation: Swift.Bool
    public var overrideTrustHostname: Swift.Bool
    public var desiredTrustHostname: Swift.String?
    public var sslClientCertificate: GliaCoreDependency.Starscream.SSLClientCertificate?
    public var enableCompression: Swift.Bool
    public var security: GliaCoreDependency.StarscreamSSLTrustValidator?
    public var enabledSSLCipherSuites: [Security.SSLCipherSuite]?
    public var isConnected: Swift.Bool {
      get
    }
    public var request: Foundation.URLRequest
    public var currentURL: Foundation.URL {
      get
    }
    public var respondToPingWithPong: Swift.Bool
    public init(request: Foundation.URLRequest, protocols: [Swift.String]? = nil, stream: GliaCoreDependency.WSStream = FoundationStream())
    convenience public init(url: Foundation.URL, protocols: [Swift.String]? = nil)
    convenience public init(url: Foundation.URL, writeQueueQOS: Foundation.QualityOfService, protocols: [Swift.String]? = nil)
    open func connect()
    open func disconnect(forceTimeout: Foundation.TimeInterval? = nil, closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
    open func write(string: Swift.String, completion: (() -> ())? = nil)
    open func write(data: Foundation.Data, completion: (() -> ())? = nil)
    open func write(ping: Foundation.Data, completion: (() -> ())? = nil)
    open func write(pong: Foundation.Data, completion: (() -> ())? = nil)
    public func newBytesInStream()
    public func streamDidError(error: Swift.Error?)
    @objc deinit
  }
}
public protocol SocketData {
  func socketRepresentation() throws -> GliaCoreDependency.SocketData
}
extension GliaCoreDependency.SocketData {
  public func socketRepresentation() -> GliaCoreDependency.SocketData
}
extension Swift.Array : GliaCoreDependency.SocketData {
}
extension Swift.Bool : GliaCoreDependency.SocketData {
}
extension Swift.Dictionary : GliaCoreDependency.SocketData {
}
extension Swift.Double : GliaCoreDependency.SocketData {
}
extension Swift.Int : GliaCoreDependency.SocketData {
}
extension Foundation.NSArray : GliaCoreDependency.SocketData {
}
extension Foundation.Data : GliaCoreDependency.SocketData {
}
extension Foundation.NSData : GliaCoreDependency.SocketData {
}
extension Foundation.NSDictionary : GliaCoreDependency.SocketData {
}
extension Foundation.NSString : GliaCoreDependency.SocketData {
}
extension Foundation.NSNull : GliaCoreDependency.SocketData {
}
extension Swift.String : GliaCoreDependency.SocketData {
}
extension GliaCoreDependency.SocketIO {
  public typealias AckCallback = ([Any]) -> Swift.Void
  public typealias NormalCallback = ([Any], GliaCoreDependency.SocketIO.SocketAckEmitter) -> Swift.Void
}
extension GliaCoreDependency.SocketIO {
  public enum SocketClientEvent : Swift.String {
    case connect
    case disconnect
    case error
    case reconnect
    case reconnectAttempt
    case statusChange
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public protocol StarscreamSSLTrustValidator {
  func isValid(_ trust: Security.SecTrust, domain: Swift.String?) -> Swift.Bool
}
extension GliaCoreDependency.Starscream {
  open class SSLCert {
    public init(data: Foundation.Data)
    public init(key: Security.SecKey)
    @objc deinit
  }
  open class SSLSecurity : GliaCoreDependency.StarscreamSSLTrustValidator {
    public var validatedDN: Swift.Bool
    public var validateEntireChain: Swift.Bool
    convenience public init(usePublicKeys: Swift.Bool = false)
    public init(certs: [GliaCoreDependency.Starscream.SSLCert], usePublicKeys: Swift.Bool)
    open func isValid(_ trust: Security.SecTrust, domain: Swift.String?) -> Swift.Bool
    public func extractPublicKey(_ data: Foundation.Data) -> Security.SecKey?
    public func extractPublicKey(_ cert: Security.SecCertificate, policy: Security.SecPolicy) -> Security.SecKey?
    public func certificateChain(_ trust: Security.SecTrust) -> [Foundation.Data]
    public func publicKeyChain(_ trust: Security.SecTrust) -> [Security.SecKey]
    @objc deinit
  }
}
extension GliaCoreDependency.SwiftPhoenixClient {
  @_hasMissingDesignatedInitializers public class Push {
    weak public var channel: GliaCoreDependency.SwiftPhoenixClient.Channel?
    final public let event: Swift.String
    public var payload: GliaCoreDependency.SwiftPhoenixClient.Payload
    public var timeout: Foundation.TimeInterval
    public func resend(_ timeout: Foundation.TimeInterval = Defaults.timeoutInterval)
    public func send()
    @discardableResult
    public func receive(_ status: Swift.String, callback: @escaping ((GliaCoreDependency.SwiftPhoenixClient.Message) -> ())) -> GliaCoreDependency.SwiftPhoenixClient.Push
    @discardableResult
    public func delegateReceive<Target>(_ status: Swift.String, to owner: Target, callback: @escaping ((Target, GliaCoreDependency.SwiftPhoenixClient.Message) -> ())) -> GliaCoreDependency.SwiftPhoenixClient.Push where Target : AnyObject
    @objc deinit
  }
}
extension GliaCoreDependency.SocketIO {
  @objc @_hasMissingDesignatedInitializers final public class SocketAckEmitter : ObjectiveC.NSObject {
    final public var expected: Swift.Bool {
      get
    }
    final public func with(_ items: GliaCoreDependency.SocketData...)
    final public func with(_ items: [Any])
    @objc deinit
  }
  @objc @_hasMissingDesignatedInitializers final public class OnAckCallback : ObjectiveC.NSObject {
    @objc deinit
    final public func timingOut(after seconds: Swift.Int, callback: @escaping GliaCoreDependency.SocketIO.AckCallback)
  }
}
extension GliaCoreDependency.SwiftPhoenixClient {
  public typealias Payload = [Swift.String : Any]
  public typealias PayloadClosure = () -> GliaCoreDependency.SwiftPhoenixClient.Payload?
  @_hasMissingDesignatedInitializers public class Socket {
    final public let endPoint: Swift.String
    public var endPointUrl: Foundation.URL {
      get
    }
    public var params: GliaCoreDependency.SwiftPhoenixClient.Payload? {
      get
    }
    final public let paramsClosure: GliaCoreDependency.SwiftPhoenixClient.PayloadClosure?
    public var encode: ([Swift.String : Any]) -> Foundation.Data
    public var decode: (Foundation.Data) -> [Swift.String : Any]?
    public var timeout: Foundation.TimeInterval
    public var heartbeatInterval: Foundation.TimeInterval
    public var reconnectAfter: (Swift.Int) -> Foundation.TimeInterval
    public var rejoinAfter: (Swift.Int) -> Foundation.TimeInterval
    public var logger: ((Swift.String) -> Swift.Void)?
    public var skipHeartbeat: Swift.Bool
    public var disableSSLCertValidation: Swift.Bool
    public var security: GliaCoreDependency.StarscreamSSLTrustValidator?
    public var enabledSSLCipherSuites: [Security.SSLCipherSuite]?
    convenience public init(_ endPoint: Swift.String, params: GliaCoreDependency.SwiftPhoenixClient.Payload? = nil)
    convenience public init(_ endPoint: Swift.String, paramsClosure: GliaCoreDependency.SwiftPhoenixClient.PayloadClosure?)
    @objc deinit
    public var websocketProtocol: Swift.String {
      get
    }
    public var isConnected: Swift.Bool {
      get
    }
    public func connect()
    public func disconnect(code: GliaCoreDependency.Starscream.CloseCode = .normal, callback: (() -> Swift.Void)? = nil)
    public func onOpen(callback: @escaping () -> Swift.Void)
    public func delegateOnOpen<T>(to owner: T, callback: @escaping ((T) -> Swift.Void)) where T : AnyObject
    public func onClose(callback: @escaping () -> Swift.Void)
    public func delegateOnClose<T>(to owner: T, callback: @escaping ((T) -> Swift.Void)) where T : AnyObject
    public func onError(callback: @escaping (Swift.Error) -> Swift.Void)
    public func delegateOnError<T>(to owner: T, callback: @escaping ((T, Swift.Error) -> Swift.Void)) where T : AnyObject
    public func onMessage(callback: @escaping (GliaCoreDependency.SwiftPhoenixClient.Message) -> Swift.Void)
    public func delegateOnMessage<T>(to owner: T, callback: @escaping ((T, GliaCoreDependency.SwiftPhoenixClient.Message) -> Swift.Void)) where T : AnyObject
    public func releaseCallbacks()
    public func channel(_ topic: Swift.String, params: [Swift.String : Any] = [:]) -> GliaCoreDependency.SwiftPhoenixClient.Channel
    public func remove(_ channel: GliaCoreDependency.SwiftPhoenixClient.Channel)
    public func makeRef() -> Swift.String
  }
}
extension GliaCoreDependency.SwiftPhoenixClient.Socket : GliaCoreDependency.WebSocketDelegate {
  public func websocketDidConnect(socket: GliaCoreDependency.WebSocketClient)
  public func websocketDidDisconnect(socket: GliaCoreDependency.WebSocketClient, error: Swift.Error?)
  public func websocketDidReceiveMessage(socket: GliaCoreDependency.WebSocketClient, text: Swift.String)
  public func websocketDidReceiveData(socket: GliaCoreDependency.WebSocketClient, data: Foundation.Data)
}
extension GliaCoreDependency.SocketIO {
  @objc public enum SocketEnginePacketType : Swift.Int {
    case open
    case close
    case ping
    case pong
    case message
    case upgrade
    case noop
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension GliaCoreDependency.SocketIO {
  @objc open class SocketIOClient : ObjectiveC.NSObject, GliaCoreDependency.SocketEngineClient {
    final public let socketURL: Foundation.URL
    public var engine: GliaCoreDependency.SocketEngineSpec? {
      get
    }
    public var status: GliaCoreDependency.SocketIO.SocketIOClientStatus {
      get
    }
    public var forceNew: Swift.Bool
    public var handleQueue: Dispatch.DispatchQueue
    public var nsp: Swift.String
    public var config: GliaCoreDependency.SocketIO.SocketIOClientConfiguration
    public var reconnects: Swift.Bool
    public var reconnectWait: Swift.Int
    public var sid: Swift.String? {
      get
    }
    public init(socketURL: Foundation.URL, config: GliaCoreDependency.SocketIO.SocketIOClientConfiguration = [])
    convenience public init(socketURL: Foundation.NSURL, config: Foundation.NSDictionary?)
    @objc deinit
    open func connect()
    open func connect(timeoutAfter: Swift.Int, withHandler handler: (() -> Swift.Void)?)
    open func disconnect()
    open func emit(_ event: Swift.String, _ items: GliaCoreDependency.SocketData...)
    open func emit(_ event: Swift.String, with items: [Any])
    open func emitWithAck(_ event: Swift.String, _ items: GliaCoreDependency.SocketData...) -> GliaCoreDependency.SocketIO.OnAckCallback
    open func emitWithAck(_ event: Swift.String, with items: [Any]) -> GliaCoreDependency.SocketIO.OnAckCallback
    @objc open func engineDidClose(reason: Swift.String)
    @objc open func engineDidError(reason: Swift.String)
    @objc open func engineDidOpen(reason: Swift.String)
    open func handleEvent(_ event: Swift.String, data: [Any], isInternalMessage: Swift.Bool, withAck ack: Swift.Int = -1)
    open func leaveNamespace()
    open func joinNamespace(_ namespace: Swift.String)
    open func off(_ event: Swift.String)
    open func off(id: Foundation.UUID)
    @discardableResult
    open func on(_ event: Swift.String, callback: @escaping GliaCoreDependency.SocketIO.NormalCallback) -> Foundation.UUID
    @discardableResult
    open func on(clientEvent event: GliaCoreDependency.SocketIO.SocketClientEvent, callback: @escaping GliaCoreDependency.SocketIO.NormalCallback) -> Foundation.UUID
    @discardableResult
    open func once(_ event: Swift.String, callback: @escaping GliaCoreDependency.SocketIO.NormalCallback) -> Foundation.UUID
    open func onAny(_ handler: @escaping (GliaCoreDependency.SocketIO.SocketAnyEvent) -> Swift.Void)
    @objc public func parseEngineMessage(_ msg: Swift.String)
    @objc public func parseEngineBinaryData(_ data: Foundation.Data)
    open func reconnect()
    open func removeAllHandlers()
  }
}
extension GliaCoreDependency.SocketIO {
  @objc final public class SocketEngine : ObjectiveC.NSObject, Foundation.URLSessionDelegate, GliaCoreDependency.SocketEnginePollable, GliaCoreDependency.SocketEngineWebsocket {
    @objc final public let engineQueue: Dispatch.DispatchQueue
    @objc final public var connectParams: [Swift.String : Any]? {
      @objc get
      @objc set
    }
    final public var postWait: [Swift.String]
    final public var waitingForPoll: Swift.Bool
    final public var waitingForPost: Swift.Bool
    @objc final public var closed: Swift.Bool {
      get
    }
    @objc final public var connected: Swift.Bool {
      get
    }
    @objc final public var cookies: [Foundation.HTTPCookie]? {
      get
    }
    @objc final public var doubleEncodeUTF8: Swift.Bool {
      get
    }
    @objc final public var extraHeaders: [Swift.String : Swift.String]? {
      get
    }
    @objc final public var fastUpgrade: Swift.Bool {
      get
    }
    @objc final public var forcePolling: Swift.Bool {
      get
    }
    @objc final public var forceWebsockets: Swift.Bool {
      get
    }
    final public var invalidated: Swift.Bool {
      get
    }
    @objc final public var polling: Swift.Bool {
      get
    }
    @objc final public var probing: Swift.Bool {
      get
    }
    final public var session: Foundation.URLSession? {
      get
    }
    @objc final public var sid: Swift.String {
      get
    }
    @objc final public var socketPath: Swift.String {
      get
    }
    @objc final public var urlPolling: Foundation.URL {
      get
    }
    @objc final public var urlWebSocket: Foundation.URL {
      get
    }
    @objc final public var websocket: Swift.Bool {
      get
    }
    @objc final public var ws: GliaCoreDependency.SocketIO.WebSocket? {
      get
    }
    @objc weak final public var client: GliaCoreDependency.SocketEngineClient?
    public init(client: GliaCoreDependency.SocketEngineClient, url: Foundation.URL, config: GliaCoreDependency.SocketIO.SocketIOClientConfiguration)
    @objc convenience public init(client: GliaCoreDependency.SocketEngineClient, url: Foundation.URL, options: Foundation.NSDictionary?)
    @objc deinit
    @objc final public func connect()
    @objc final public func didError(reason: Swift.String)
    @objc final public func disconnect(reason: Swift.String)
    @objc final public func doFastUpgrade()
    @objc final public func flushWaitingForPostToWebSocket()
    @objc final public func parseEngineData(_ data: Foundation.Data)
    @objc final public func parseEngineMessage(_ message: Swift.String, fromPolling: Swift.Bool)
    @objc final public func write(_ msg: Swift.String, withType type: GliaCoreDependency.SocketIO.SocketEnginePacketType, withData data: [Foundation.Data])
    final public func websocketDidConnect(socket: GliaCoreDependency.SocketIO.WebSocket)
    final public func websocketDidDisconnect(socket: GliaCoreDependency.SocketIO.WebSocket, error: Foundation.NSError?)
  }
}
extension GliaCoreDependency.SocketIO.SocketEngine {
  final public func URLSession(session: Foundation.URLSession, didBecomeInvalidWithError error: Foundation.NSError?)
}
extension GliaCoreDependency.SocketIO {
  @objc public enum SocketIOClientStatus : Swift.Int {
    case notConnected
    case disconnected
    case connecting
    case connected
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension GliaCoreDependency.SwiftPhoenixClient {
  final public class Presence {
    public struct Options {
      public static let defaults: GliaCoreDependency.SwiftPhoenixClient.Presence.Options
    }
    public enum Events : Swift.String {
      case state
      case diff
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public typealias Meta = [Swift.String : Any]
    public typealias Map = [Swift.String : [GliaCoreDependency.SwiftPhoenixClient.Presence.Meta]]
    public typealias State = [Swift.String : GliaCoreDependency.SwiftPhoenixClient.Presence.Map]
    public typealias Diff = [Swift.String : GliaCoreDependency.SwiftPhoenixClient.Presence.State]
    public typealias OnJoin = (_ key: Swift.String, _ current: GliaCoreDependency.SwiftPhoenixClient.Presence.Map?, _ new: GliaCoreDependency.SwiftPhoenixClient.Presence.Map) -> Swift.Void
    public typealias OnLeave = (_ key: Swift.String, _ current: GliaCoreDependency.SwiftPhoenixClient.Presence.Map, _ left: GliaCoreDependency.SwiftPhoenixClient.Presence.Map) -> Swift.Void
    public typealias OnSync = () -> Swift.Void
    final public var state: GliaCoreDependency.SwiftPhoenixClient.Presence.State {
      get
    }
    final public var pendingDiffs: [GliaCoreDependency.SwiftPhoenixClient.Presence.Diff] {
      get
    }
    final public var joinRef: Swift.String? {
      get
    }
    final public var isPendingSyncState: Swift.Bool {
      get
    }
    final public var onJoin: GliaCoreDependency.SwiftPhoenixClient.Presence.OnJoin {
      get
      set
    }
    final public func onJoin(_ callback: @escaping GliaCoreDependency.SwiftPhoenixClient.Presence.OnJoin)
    final public var onLeave: GliaCoreDependency.SwiftPhoenixClient.Presence.OnLeave {
      get
      set
    }
    final public func onLeave(_ callback: @escaping GliaCoreDependency.SwiftPhoenixClient.Presence.OnLeave)
    final public var onSync: GliaCoreDependency.SwiftPhoenixClient.Presence.OnSync {
      get
      set
    }
    final public func onSync(_ callback: @escaping GliaCoreDependency.SwiftPhoenixClient.Presence.OnSync)
    public init(channel: GliaCoreDependency.SwiftPhoenixClient.Channel, opts: GliaCoreDependency.SwiftPhoenixClient.Presence.Options = Options.defaults)
    final public func list() -> [GliaCoreDependency.SwiftPhoenixClient.Presence.Map]
    final public func list<T>(by transformer: (Swift.String, GliaCoreDependency.SwiftPhoenixClient.Presence.Map) -> T) -> [T]
    final public func filter(by filter: ((Swift.String, GliaCoreDependency.SwiftPhoenixClient.Presence.Map) -> Swift.Bool)?) -> GliaCoreDependency.SwiftPhoenixClient.Presence.State
    @discardableResult
    public static func syncState(_ currentState: GliaCoreDependency.SwiftPhoenixClient.Presence.State, newState: GliaCoreDependency.SwiftPhoenixClient.Presence.State, onJoin: (_ key: Swift.String, _ current: GliaCoreDependency.SwiftPhoenixClient.Presence.Map?, _ new: GliaCoreDependency.SwiftPhoenixClient.Presence.Map) -> Swift.Void = {_,_,_ in }, onLeave: (_ key: Swift.String, _ current: GliaCoreDependency.SwiftPhoenixClient.Presence.Map, _ left: GliaCoreDependency.SwiftPhoenixClient.Presence.Map) -> Swift.Void = {_,_,_ in }) -> GliaCoreDependency.SwiftPhoenixClient.Presence.State
    @discardableResult
    public static func syncDiff(_ currentState: GliaCoreDependency.SwiftPhoenixClient.Presence.State, diff: GliaCoreDependency.SwiftPhoenixClient.Presence.Diff, onJoin: (_ key: Swift.String, _ current: GliaCoreDependency.SwiftPhoenixClient.Presence.Map?, _ new: GliaCoreDependency.SwiftPhoenixClient.Presence.Map) -> Swift.Void = {_,_,_ in }, onLeave: (_ key: Swift.String, _ current: GliaCoreDependency.SwiftPhoenixClient.Presence.Map, _ left: GliaCoreDependency.SwiftPhoenixClient.Presence.Map) -> Swift.Void = {_,_,_ in }) -> GliaCoreDependency.SwiftPhoenixClient.Presence.State
    public static func filter(_ presences: GliaCoreDependency.SwiftPhoenixClient.Presence.State, by filter: ((Swift.String, GliaCoreDependency.SwiftPhoenixClient.Presence.Map) -> Swift.Bool)?) -> GliaCoreDependency.SwiftPhoenixClient.Presence.State
    public static func listBy<T>(_ presences: GliaCoreDependency.SwiftPhoenixClient.Presence.State, transformer: (Swift.String, GliaCoreDependency.SwiftPhoenixClient.Presence.Map) -> T) -> [T]
    @objc deinit
  }
}
extension GliaCoreDependency.Starscream {
  public struct SSLClientCertificateError : Foundation.LocalizedError {
    public var errorDescription: Swift.String?
  }
}
extension GliaCoreDependency.Starscream {
  public class SSLClientCertificate {
    convenience public init(pkcs12Path: Swift.String, password: Swift.String) throws
    public init(identity: Security.SecIdentity, identityCertificate: Security.SecCertificate)
    convenience public init(pkcs12Url: Foundation.URL, password: Swift.String) throws
    public init(pkcs12Url: Foundation.URL, importOptions: CoreFoundation.CFDictionary) throws
    @objc deinit
  }
}
extension GliaCoreDependency.SocketIO {
  public enum SocketAckStatus : Swift.String {
    case noAck
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension GliaCoreDependency.SocketIO {
  public enum SocketIOClientOption {
    case connectParams([Swift.String : Any])
    case cookies([Foundation.HTTPCookie])
    case doubleEncodeUTF8(Swift.Bool)
    case extraHeaders([Swift.String : Swift.String])
    case forceNew(Swift.Bool)
    case forcePolling(Swift.Bool)
    case forceWebsockets(Swift.Bool)
    case handleQueue(Dispatch.DispatchQueue)
    case log(Swift.Bool)
    case logger(GliaCoreDependency.SocketLogger)
    case nsp(Swift.String)
    case path(Swift.String)
    case reconnects(Swift.Bool)
    case reconnectAttempts(Swift.Int)
    case reconnectWait(Swift.Int)
    case secure(Swift.Bool)
    case security(GliaCoreDependency.SocketIO.SSLSecurity)
    case selfSigned(Swift.Bool)
    case sessionDelegate(Foundation.URLSessionDelegate)
    case voipEnabled(Swift.Bool)
    public var description: Swift.String {
      get
    }
    public static func == (lhs: GliaCoreDependency.SocketIO.SocketIOClientOption, rhs: GliaCoreDependency.SocketIO.SocketIOClientOption) -> Swift.Bool
  }
}
extension GliaCoreDependency.SwiftPhoenixClient {
  @_hasMissingDesignatedInitializers public class Message {
    final public let ref: Swift.String
    final public let topic: Swift.String
    final public let event: Swift.String
    public var payload: GliaCoreDependency.SwiftPhoenixClient.Payload
    public var status: Swift.String? {
      get
    }
    @objc deinit
  }
}
public struct Delegated<Input, Output> {
  public init()
  public mutating func delegate<Target>(to target: Target, with callback: @escaping (Target, Input) -> Output) where Target : AnyObject
  public func call(_ input: Input) -> Output?
  public var isDelegateSet: Swift.Bool {
    get
  }
}
extension GliaCoreDependency.Delegated {
  public mutating func stronglyDelegate<Target>(to target: Target, with callback: @escaping (Target, Input) -> Output) where Target : AnyObject
  public mutating func manuallyDelegate(with callback: @escaping (Input) -> Output)
  public mutating func removeDelegate()
}
extension GliaCoreDependency.Delegated where Input == Swift.Void {
  public mutating func delegate<Target>(to target: Target, with callback: @escaping (Target) -> Output) where Target : AnyObject
  public mutating func stronglyDelegate<Target>(to target: Target, with callback: @escaping (Target) -> Output) where Target : AnyObject
}
extension GliaCoreDependency.Delegated where Input == Swift.Void {
  public func call() -> Output?
}
extension GliaCoreDependency.Delegated where Output == Swift.Void {
  public func call(_ input: Input)
}
extension GliaCoreDependency.Delegated where Input == Swift.Void, Output == Swift.Void {
  public func call()
}
public protocol SocketEnginePollable : GliaCoreDependency.SocketEngineSpec {
  var invalidated: Swift.Bool { get }
  var postWait: [Swift.String] { get set }
  var session: Foundation.URLSession? { get }
  var waitingForPoll: Swift.Bool { get set }
  var waitingForPost: Swift.Bool { get set }
  func doPoll()
  func sendPollMessage(_ message: Swift.String, withType type: GliaCoreDependency.SocketIO.SocketEnginePacketType, withData datas: [Foundation.Data])
  func stopPolling()
}
extension GliaCoreDependency.SocketEnginePollable {
  public func doPoll()
  public func sendPollMessage(_ message: Swift.String, withType type: GliaCoreDependency.SocketIO.SocketEnginePacketType, withData datas: [Foundation.Data])
  public func stopPolling()
}
public protocol SocketEngineWebsocket : GliaCoreDependency.SocketEngineSpec, GliaCoreDependency.SocketIOWebSocketDelegate {
  func sendWebSocketMessage(_ str: Swift.String, withType type: GliaCoreDependency.SocketIO.SocketEnginePacketType, withData datas: [Foundation.Data])
}
extension GliaCoreDependency.SocketEngineWebsocket {
  public func sendWebSocketMessage(_ str: Swift.String, withType type: GliaCoreDependency.SocketIO.SocketEnginePacketType, withData datas: [Foundation.Data])
  public func websocketDidReceiveMessage(socket: GliaCoreDependency.SocketIO.WebSocket, text: Swift.String)
  public func websocketDidReceiveData(socket: GliaCoreDependency.SocketIO.WebSocket, data: Foundation.Data)
}
@_hasMissingDesignatedInitializers public class Defaults {
  public static let timeoutInterval: Swift.Double
  public static let heartbeatInterval: Swift.Double
  public static let reconnectSteppedBackOff: (_ tries: Swift.Int) -> Foundation.TimeInterval
  public static let rejoinSteppedBackOff: (_ tries: Swift.Int) -> Foundation.TimeInterval
  public static let encode: (_ json: [Swift.String : Any]) -> Foundation.Data
  public static let decode: (_ data: Foundation.Data) -> [Swift.String : Any]?
  @objc deinit
}
public enum ChannelState : Swift.String {
  case closed
  case errored
  case joined
  case joining
  case leaving
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ChannelEvent {
  public static let heartbeat: Swift.String
  public static let join: Swift.String
  public static let leave: Swift.String
  public static let reply: Swift.String
  public static let error: Swift.String
  public static let close: Swift.String
}
extension GliaCoreDependency.SocketIO {
  @objc @_inheritsConvenienceInitializers open class SocketClientManager : ObjectiveC.NSObject {
    public static let sharedManager: GliaCoreDependency.SocketIO.SocketClientManager
    open subscript(string: Swift.String) -> GliaCoreDependency.SocketIO.SocketIOClient? {
      get
      set(socket)
    }
    open func addSocket(_ socket: GliaCoreDependency.SocketIO.SocketIOClient, labeledAs label: Swift.String)
    @discardableResult
    open func removeSocket(withLabel label: Swift.String) -> GliaCoreDependency.SocketIO.SocketIOClient?
    @discardableResult
    open func removeSocket(_ socket: GliaCoreDependency.SocketIO.SocketIOClient) -> GliaCoreDependency.SocketIO.SocketIOClient?
    open func removeSockets()
    @objc override dynamic public init()
    @objc deinit
  }
}
public protocol SocketLogger : AnyObject {
  var log: Swift.Bool { get set }
  func log(_ message: Swift.String, type: Swift.String, args: Any...)
  func error(_ message: Swift.String, type: Swift.String, args: Any...)
}
extension GliaCoreDependency.SocketLogger {
  public func log(_ message: Swift.String, type: Swift.String, args: Any...)
  public func error(_ message: Swift.String, type: Swift.String, args: Any...)
}
@objc public protocol SocketEngineClient {
  @objc func engineDidError(reason: Swift.String)
  @objc func engineDidClose(reason: Swift.String)
  @objc func engineDidOpen(reason: Swift.String)
  @objc func parseEngineMessage(_ msg: Swift.String)
  @objc func parseEngineBinaryData(_ data: Foundation.Data)
}
public enum Starscream {
}
public enum SwiftPhoenixClient {
}
public enum SocketIO {
}
extension GliaCoreDependency.SocketIO.WebSocket.CloseCode : Swift.Equatable {}
extension GliaCoreDependency.SocketIO.WebSocket.CloseCode : Swift.Hashable {}
extension GliaCoreDependency.SocketIO.WebSocket.CloseCode : Swift.RawRepresentable {}
extension GliaCoreDependency.Starscream.CloseCode : Swift.Equatable {}
extension GliaCoreDependency.Starscream.CloseCode : Swift.Hashable {}
extension GliaCoreDependency.Starscream.CloseCode : Swift.RawRepresentable {}
extension GliaCoreDependency.Starscream.ErrorType : Swift.Equatable {}
extension GliaCoreDependency.Starscream.ErrorType : Swift.Hashable {}
extension GliaCoreDependency.Starscream.WebSocket.OpCode : Swift.Equatable {}
extension GliaCoreDependency.Starscream.WebSocket.OpCode : Swift.Hashable {}
extension GliaCoreDependency.Starscream.WebSocket.OpCode : Swift.RawRepresentable {}
extension GliaCoreDependency.SocketIO.SocketClientEvent : Swift.Equatable {}
extension GliaCoreDependency.SocketIO.SocketClientEvent : Swift.Hashable {}
extension GliaCoreDependency.SocketIO.SocketClientEvent : Swift.RawRepresentable {}
extension GliaCoreDependency.SocketIO.SocketEnginePacketType : Swift.Equatable {}
extension GliaCoreDependency.SocketIO.SocketEnginePacketType : Swift.Hashable {}
extension GliaCoreDependency.SocketIO.SocketEnginePacketType : Swift.RawRepresentable {}
extension GliaCoreDependency.SocketIO.SocketIOClientStatus : Swift.Equatable {}
extension GliaCoreDependency.SocketIO.SocketIOClientStatus : Swift.Hashable {}
extension GliaCoreDependency.SocketIO.SocketIOClientStatus : Swift.RawRepresentable {}
extension GliaCoreDependency.SwiftPhoenixClient.Presence.Events : Swift.Equatable {}
extension GliaCoreDependency.SwiftPhoenixClient.Presence.Events : Swift.Hashable {}
extension GliaCoreDependency.SwiftPhoenixClient.Presence.Events : Swift.RawRepresentable {}
extension GliaCoreDependency.SocketIO.SocketAckStatus : Swift.Equatable {}
extension GliaCoreDependency.SocketIO.SocketAckStatus : Swift.Hashable {}
extension GliaCoreDependency.SocketIO.SocketAckStatus : Swift.RawRepresentable {}
extension GliaCoreDependency.SocketIO.SocketIOClientOption : Swift.Equatable {}
extension GliaCoreDependency.SocketIO.SocketIOClientOption : Swift.CustomStringConvertible {}
extension GliaCoreDependency.ChannelState : Swift.Equatable {}
extension GliaCoreDependency.ChannelState : Swift.Hashable {}
extension GliaCoreDependency.ChannelState : Swift.RawRepresentable {}
